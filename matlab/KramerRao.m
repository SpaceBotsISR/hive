% Pose of the lighthouse in the vive frame
syms vRl_11 vRl_12 vRl_13 vRl_21 vRl_22 vRl_23 vRl_31 vRl_32 vRl_33
syms vAl_x vAl_y vAl_z
syms vPl_x vPl_y vPl_z
% Pose of the tracker in the vive frame
syms vRt_11 vRt_12 vRt_13 vRt_21 vRt_22 vRt_23 vRt_31 vRt_32 vRt_33
syms vAt_x vAt_y vAt_z
syms vPt_x vPt_y vPt_z
% Photodiodes in the tracker's frame
syms tPs_x tPs_y tPs_z

sensors = [0.1 0.1 0.0; -0.1 -0.1 0.0; -0.1 0.1 0.0; 0.1 -0.1 0.0]';
tracker_position = [0.0; 0.0; 1.0];
tracker_angleaxis = [0.0; 0.0; 0.0];
tracker_rotation = eye(3);
lighthouse_position = [0.0; 0.0; 0.0];
lighthouse_rotation = eye(3);
noise = 0.05;

vRl = [vRl_11 vRl_12 vRl_13;vRl_21 vRl_22 vRl_23; vRl_31 vRl_32 vRl_33];
vPl = [vPl_x;vPl_y;vPl_z];
lPv = -vRl.' * vPl;
lRv = vRl.';

vOMEGAt = [0.0 -vAt_z vAt_y; vAt_z 0.0 -vAt_x; -vAt_y vAt_x 0.0];
vRt = eye(3) + vOMEGAt + 1/factorial(2) * vOMEGAt^2 + ...
    1/factorial(3) * vOMEGAt^3 + ...
    1/factorial(4) * vOMEGAt^4 + ...
    1/factorial(5) * vOMEGAt^5 + ...
    1/factorial(6) * vOMEGAt^6 + ...
    1/factorial(7) * vOMEGAt^7 + ...
    1/factorial(8) * vOMEGAt^8 + ...
    1/factorial(9) * vOMEGAt^9;
% vRt = [vRt_11 vRt_12 vRt_13;vRt_21 vRt_22 vRt_23; vRt_31 vRt_32 vRt_33];
vPt = [vPt_x;vPt_y;vPt_z];

% Only matters for one lighthouse
% lRt = [lRt_11 lRt_12 lRt_13;lRt_21 lRt_22 lRt_23; lRt_31 lRt_32 lRt_33];
% lPt = [lPt_x;lPt_y;lPt_z];

tPs = [tPs_x;tPs_y;tPs_z];

% Single Lighthouse
% lPs = lRt * tPs + lPt;
lPs = lRv * (vRt * tPs + vPt) + lPv ;

x = (lPs(1)/lPs(3));
y = (lPs(2)/lPs(3));
syms phase tilt gib_phase gib_mag curve
% alphaH = atan(x) - phase - tan(tilt) * y - curve * y * y - sin(gib_phase + atan(x)) * gib_mag;
% alphaV = atan(y) - phase - tan(tilt) * x - curve * x * x - sin(gib_phase + atan(y)) * gib_mag;

% Horizontal
alphaH = atan(x);
alphaH = subs(alphaH, [vPl_x vPl_y vPl_z ...
    vRl_11 vRl_12 vRl_13 vRl_21 vRl_22 vRl_23 vRl_31 vRl_32 vRl_33], ...
    [lighthouse_position' ...
    lighthouse_rotation(1,:) lighthouse_rotation(2,:) lighthouse_rotation(3,:)]);
% Vertical
alphaV = atan(y);
alphaV = subs(alphaV, [vPl_x vPl_y vPl_z ...
    vRl_11 vRl_12 vRl_13 vRl_21 vRl_22 vRl_23 vRl_31 vRl_32 vRl_33], ...
    [lighthouse_position' ...
    lighthouse_rotation(1,:) lighthouse_rotation(2,:) lighthouse_rotation(3,:)]);

% measurement and measurement noise
syms alpha sigma mu
B = pi/3;
A = -pi/3;

% Probability of an horizontal measurement given the parameters
NalphaH = 1/(sqrt(2*pi))*exp(-0.5 * ((alpha - alphaH)/sigma)^2);
BalphaH = int(1/(sqrt(2*pi))*exp(-0.5 * ((alpha - alphaH)/sigma)^2),alpha,0,B);
AalphaH = int(1/(sqrt(2*pi))*exp(-0.5 * ((alpha - alphaH)/sigma)^2),alpha,0,A);
% Truncated Normal Distribution
PalphaH = NalphaH / (sigma * (BalphaH - AalphaH));
% log likedlihood
logPalphaH = log(PalphaH);
ElogPalphaH = int(logPalphaH,alpha,A,B);

% Probability of an vertical measurement given the parameters
NalphaV = 1/(sqrt(2*pi))*exp(-0.5 * ((alpha - alphaV)/sigma)^2);
BalphaV = int(1/(sqrt(2*pi))*exp(-0.5 * ((alpha - alphaV)/sigma)^2),alpha,0,B);
AalphaV = int(1/(sqrt(2*pi))*exp(-0.5 * ((alpha - alphaV)/sigma)^2),alpha,0,A);
% Truncated Normal Distribution
PalphaV = NalphaV / (sigma * (BalphaV - AalphaV));
% log likedlihood
logPalphaV = log(PalphaV);
ElogPalphaV = int(logPalphaV,alpha,A,B);

final_bound_Px = 0;
final_bound_Py = 0;
final_bound_Pz = 0;
final_bound_Ax = 0;
final_bound_Ay = 0;
final_bound_Az = 0;
for i = 1:4
    % POSITION
    % dPx
    % Horizontal Sweep
    theta = vPt_x;
    ddElogPH  = diff(diff(ElogPalphaH, theta),theta);
    boundH = subs(ddElogPH,[tPs_x tPs_y tPs_z ...
        vPt_x vPt_y vPt_z ...
        vAt_x vAt_y vAt_z ...
        sigma], ...
        [sensors(:,i)' ...
        tracker_position' ...
        tracker_angleaxis' ...
        0.05]);
    % Vertical sweep
    ddElogPV  = diff(diff(ElogPalphaV, theta),theta);
    boundV = subs(ddElogPV,[tPs_x tPs_y tPs_z ...
        vPt_x vPt_y vPt_z ...
        vAt_x vAt_y vAt_z ...
        sigma], ...
        [sensors(:,i)' ...
        tracker_position' ...
        tracker_angleaxis' ...
        0.05]);
    final_bound_Px = final_bound_Px + boundH + boundV;
    disp(['Sensor ' num2str(i-1)]);
    disp(['dl/dPx - H: ' num2str(double(boundH))]);
    disp(['dl/dPx - V: ' num2str(double(boundV))]);
    % dPy
    %Horizontal Sweep
    theta = vPt_y;
    ddElogPH  = diff(diff(ElogPalphaH, theta),theta);
    boundH = subs(ddElogPH,[tPs_x tPs_y tPs_z ...
        vPt_x vPt_y vPt_z ...
        vAt_x vAt_y vAt_z ...
        sigma], ...
        [sensors(:,i)' ...
        tracker_position' ...
        tracker_angleaxis' ...
        0.05]);
    % Vertical sweep
    ddElogPV  = diff(diff(ElogPalphaV, theta),theta);
    boundV = subs(ddElogPV,[tPs_x tPs_y tPs_z ...
        vPt_x vPt_y vPt_z ...
        vAt_x vAt_y vAt_z ...
        sigma], ...
        [sensors(:,i)' ...
        tracker_position' ...
        tracker_angleaxis' ...
        0.05]);
    final_bound_Py = final_bound_Py + boundH + boundV;
    disp(['Sensor ' num2str(i-1)]);
    disp(['dl/dPy - H: ' num2str(double(boundH))]);
    disp(['dl/dPy - V: ' num2str(double(boundV))]);
    % dPz
    %Horizontal Sweep
    theta = vPt_z;
    ddElogPH  = diff(diff(ElogPalphaH, theta),theta);
    boundH = subs(ddElogPH,[tPs_x tPs_y tPs_z ...
        vPt_x vPt_y vPt_z ...
        vAt_x vAt_y vAt_z ...
        sigma], ...
        [sensors(:,i)' ...
        tracker_position' ...
        tracker_angleaxis' ...
        0.05]);
    % Vertical sweep
    ddElogPV  = diff(diff(ElogPalphaV, theta),theta);
    boundV = subs(ddElogPV,[tPs_x tPs_y tPs_z ...
        vPt_x vPt_y vPt_z ...
        vAt_x vAt_y vAt_z ...
        sigma], ...
        [sensors(:,i)' ...
        tracker_position' ...
        tracker_angleaxis' ...
        0.05]);
    final_bound_Pz = final_bound_Pz + boundH + boundV;
    disp(['Sensor ' num2str(i-1)]);
    disp(['dl/dPz - H: ' num2str(double(boundH))]);
    disp(['dl/dPz - V: ' num2str(double(boundV))]);

    % Orientation
    % dAx
    % Horizontal Sweep
    theta = vAt_x;
    ddElogPH  = diff(diff(ElogPalphaH, theta),theta);
    boundH = subs(ddElogPH,[tPs_x tPs_y tPs_z ...
        vPt_x vPt_y vPt_z ...
        vAt_x vAt_y vAt_z ...
        sigma], ...
        [sensors(:,i)' ...
        tracker_position' ...
        tracker_angleaxis' ...
        0.05]);
    % Vertical sweep
    ddElogPV  = diff(diff(ElogPalphaV, theta),theta);
    boundV = subs(ddElogPV,[tPs_x tPs_y tPs_z ...
        vPt_x vPt_y vPt_z ...
        vAt_x vAt_y vAt_z ...
        sigma], ...
        [sensors(:,i)' ...
        tracker_position' ...
        tracker_angleaxis' ...
        0.05]);
    final_bound_Ax = final_bound_Ax + boundH + boundV;
    disp(['Sensor ' num2str(i-1)]);
    disp(['dl/dAx - H: ' num2str(double(boundH))]);
    disp(['dl/dAx - V: ' num2str(double(boundV))]);
    % dAy
    %Horizontal Sweep
    theta = vAt_y;
    ddElogPH  = diff(diff(ElogPalphaH, theta),theta);
    boundH = subs(ddElogPH,[tPs_x tPs_y tPs_z ...
        vPt_x vPt_y vPt_z ...
        vAt_x vAt_y vAt_z ...
        sigma], ...
        [sensors(:,i)' ...
        tracker_position' ...
        tracker_angleaxis' ...
        0.05]);
    % Vertical sweep
    ddElogPV  = diff(diff(ElogPalphaV, theta),theta);
    boundV = subs(ddElogPV,[tPs_x tPs_y tPs_z ...
        vPt_x vPt_y vPt_z ...
        vAt_x vAt_y vAt_z ...
        sigma], ...
        [sensors(:,i)' ...
        tracker_position' ...
        tracker_angleaxis' ...
        0.05]);
    final_bound_Ay = final_bound_Ay + boundH + boundV;
    disp(['Sensor ' num2str(i-1)]);
    disp(['dl/dAy - H: ' num2str(double(boundH))]);
    disp(['dl/dAy - V: ' num2str(double(boundV))]);
    % dPz
    %Horizontal Sweep
    theta = vAt_z;
    ddElogPH  = diff(diff(ElogPalphaH, theta),theta);
    boundH = subs(ddElogPH,[tPs_x tPs_y tPs_z ...
        vPt_x vPt_y vPt_z ...
        vAt_x vAt_y vAt_z ...
        sigma], ...
        [sensors(:,i)' ...
        tracker_position' ...
        tracker_angleaxis' ...
        0.05]);
    % Vertical sweep
    ddElogPV  = diff(diff(ElogPalphaV, theta),theta);
    boundV = subs(ddElogPV,[tPs_x tPs_y tPs_z ...
        vPt_x vPt_y vPt_z ...
        vAt_x vAt_y vAt_z ...
        sigma], ...
        [sensors(:,i)' ...
        tracker_position' ...
        tracker_angleaxis' ...
        0.05]);
    final_bound_Az = final_bound_Az + boundH + boundV;
    disp(['Sensor ' num2str(i-1)]);
    disp(['dl/dAz - H: ' num2str(double(boundH))]);
    disp(['dl/dAz - V: ' num2str(double(boundV))]);
end
disp(['V_Px: ' num2str(double(-1/final_bound_Px))]);
disp(['V_Py: ' num2str(double(-1/final_bound_Py))]);
disp(['V_Pz: ' num2str(double(-1/final_bound_Pz))]);
disp(['V_Ax: ' num2str(double(-1/final_bound_Ax))]);
disp(['V_Ay: ' num2str(double(-1/final_bound_Ay))]);
disp(['V_Az: ' num2str(double(-1/final_bound_Az))]);
return